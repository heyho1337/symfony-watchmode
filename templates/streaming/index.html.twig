{% extends 'base.html.twig' %}

{% block title %}Streaming List{% endblock %}

{% block body %}

<section class="streamingPage max-w-[1400px] mx-auto">
	<div class="head mb-[20px] grid bg-[url('{{ cdn }}images/streamLogos/{{ streamingRow['ios_scheme'] }}_{{ streamingRow['id'] }}.webp')] 
		"
		style="background-image:url('{{ cdn }}images/streamLogos/{{ streamingRow['ios_scheme'] }}_{{ streamingRow['id'] }}.webp');"
		>
    	<h1 class="bg-gray-950 px-8 font-black z-10 text-white uppercase text-5xl">{{streamingRow['name']}}</h1>
	</div>
	{% if genreList is defined %}
		<input type="text" id="contentSearch" placeholder="Search..." class="mx-auto mt-[20px] mb-[20px] w-full max-w-[1200px] outline-none block h-[40px] leading-[40px] px-[8px]">
		<ul class="max-w-[1000px] mb-[20px] flex-wrap mx-auto flex items-center grid-cols-8 gap-x-[8px] gap-y-[0px]" id="genreList">
			{% for item in genreList %}
				<div class="check leading-[18px] relative inline-block items-center justify-items-center">
					<input class="m-0 absolute p-0 opacity-0 z-10 cursor-pointer w-full h-full" type="checkbox" name="genre" id="genre_{{item['id']}}" value="{{item['id']}}"/>
					<label class="relative font-ox p-0 text-center text-sm text-white font-light" for="genre_{{item['id']}}">
						<span class="text-emerald-400">#</span>{{item['name']}}
					</label>
				</div>
			{% endfor %}
		</ul>
	{% else %}
		<p class="error">No genres available.</p>
	{% endif %}

	<h2 class="resultTitle max-w-[1000px] mx-auto text-4xl text-slate-200 mb-[20px]">Search results</h2>
	<ul id="contentList" class="grid max-w-[1000px] mx-auto mb-[60px] grid-cols-5 gap-x-[16px] gap-y-[32px]">

	</ul>

	{% if recent is defined %}
		<h2 class="max-w-[1000px] mx-auto text-4xl text-slate-200 mb-[20px]">Recent releases</h2>
		<ul id="recent" class="grid max-w-[1000px] mx-auto grid-cols-5 gap-x-[16px] gap-y-[32px]">
			{% for item in recent %}
				<li class="grid gap-y-[3px] font-ox">
					<a class="grid gap-y-[16px] grid-cols-[5%,90%,5%]" href="/details/{{sourceId}}/{{item['id']}}">
						<img class="w-full col-start-1 col-end-4" src="{{item['poster_url']}}"/>
						<h3 class="col-start-2 col-end-2 text-slate-200 font-black tracking- h-[47px]">{{item['title']}}</h3>
						<span data-title="release date" class="h-[47px] col-start-2 col-end-2 info release text-sky-400">
							{{item['source_release_date']}} <br/>
							{% if item['type'] == 'tv_series' %}
								Season {{item['season_number']}}
							{% endif %}
						</span>
					</a>
					{{ item['form']|raw }}
				</li>
			{% endfor %}
		</ul>
	{% else %}
		<p class="error">No recent content available.</p>
	{% endif %}

</section>

{% block javascripts %}
    <script src="{{ asset('js/AddToFavourites.js') }}"></script>
	<script src="{{ asset('js/Dialog.js') }}"></script>
{% endblock %}

<script>
    const contentSearch = document.getElementById('contentSearch');
    const contentList = document.getElementById('contentList');
    const genreCheckboxes = document.querySelectorAll('[name="genre"]');
    const genreList = {{ genreList | json_encode() | raw }};
    let selectedGenres = [];
    let contentListData = []; // Initialize an empty array to hold the content list data

    // Function to update the content list based on selected genres and search term
    function updateContentList() {
        // Get IDs of selected genres
        const selectedGenreIds = selectedGenres.map(genreId => parseInt(genreId));
		let url = "";
        // Make AJAX request to the contentList route
		if(selectedGenreIds.length > 0){
			url = `/content/{{sourceId}}/${selectedGenreIds.join(',')}`;
		}
		else{
			url = `/content/{{sourceId}}`;
		}
        fetch(url)
            .then(response => response.json())
            .then(data => {
                contentListData = data; // Update the content list data
				console.log(contentListData);
                // Filter content list based on search term
                const searchTerm = contentSearch.value.toLowerCase();
                const filteredList = contentListData.filter(item => item.title.toLowerCase().includes(searchTerm));

                renderResults(filteredList); // Render filtered results
            })
            .catch(error => console.error('Error fetching content list:', error));
    }

    // Event listener for genre checkboxes
    genreCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', () => {
            // Update selected genres array based on checkbox state
            if (checkbox.checked) {
                selectedGenres.push(checkbox.value);
            } else {
                selectedGenres = selectedGenres.filter(genreId => genreId !== checkbox.value);
            }
            
            // Update content list
            updateContentList();
        });
    });

    // Event listener for content search input
    contentSearch.addEventListener('input', () => {
        // Filter content list based on search term
        const searchTerm = contentSearch.value.toLowerCase();
		updateContentList();
        const filteredList = contentListData.filter(item => item.title.toLowerCase().includes(searchTerm));
        renderResults(filteredList); // Render filtered results
    });

    // Function to render results in the content list
    function renderResults(list) {
        contentList.innerHTML = '';
        list.forEach(item => {
            contentList.innerHTML += item.twig;
        });
    }

    // Initial update of content list
    //updateContentList();
</script>
{% endblock %}
